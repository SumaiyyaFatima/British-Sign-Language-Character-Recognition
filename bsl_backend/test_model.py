import numpy as np
import joblib

# === Load the model and scaler ===
model = joblib.load("bsl_model.pkl")
scaler = joblib.load("scaler.pkl")

# === Load class labels if you have them saved ===
try:
    label_classes = np.load("classes.npy", allow_pickle=True)
except FileNotFoundError:
    label_classes = None

# === Your sample landmarks (63 or 126 values) ===
sample_landmarks = [
0.70274657,	0.537436843,	1.52E-07,	0.675351739,	0.509673417,	-0.00936296,	0.658872902,	0.470871359,	-0.014553691,	0.648598909,	0.439269423,	-0.01935181,	0.639256477,	0.414809495,	-0.02422129,	0.688746393,	0.406821579,	-0.005516224,	0.684835434,	0.355339676,	-0.012314632,	0.683741391,	0.324010432,	-0.019127399,	0.684659839,	0.297396511,	-0.024353011,	0.707380474,	0.406187207,	-0.007963412,	0.709107041,	0.349900484,	-0.013239757,	0.711163878,	0.313295275,	-0.019652663,	0.713690042,	0.284196168,	-0.024801025,	0.723416567,	0.416275412,	-0.012189128,	0.729876995,	0.363385797,	-0.018670358,	0.733937681,	0.329776943,	-0.024327241,	0.737096965,	0.29974708,	-0.028671362,	0.737331688,	0.434758604,	-0.017412866,	0.74652642,	0.394727021,	-0.023501592,	0.751633406,0.368319809,-0.02635244,	0.75575900,	0.34261927,-0.02854070,	0.549635649,0.551121473,-1.06E-07,0.546537042,0.497713596,0.004624961,0.562777758,0.469192952,0.004898472,0.580270648,0.465753376,0.004004811,0.592076361,0.477935761,0.002367963,0.580371141,0.449905515,-0.004753755,0.605735242,0.425171852,-0.005421625,0.620866477,0.412884444,-0.005479976,0.632710159,0.404638588,-0.006044053,0.595406771,0.470880151,-0.007200193,0.598804891,0.480405957,-0.004770948,0.59014833,0.490941763,-0.001955243,0.583273828,0.49721384,-0.001237961,0.603818655,0.502341807,-0.008396947,0.600286424,0.509391189,-0.005771412,0.592581809,0.516706049,-0.002685139,0.585253775,0.522804379,-0.002068197,0.609117389,0.531689525,-0.009268138,0.6043818,0.538501561,0.004980398,0.597596824,0.544178605,-0.000641355,0.591266811,0.547912002,0.002134305,

]

# === Handle 63 features (1 hand) by padding with zeros ===
if len(sample_landmarks) == 63:
    sample_landmarks += [0.0] * 63
elif len(sample_landmarks) != 126:
    raise ValueError(f"Expected 63 or 126 features, got {len(sample_landmarks)}")

# === Scale and predict ===
X_sample = np.array(sample_landmarks).reshape(1, -1)
X_sample_scaled = scaler.transform(X_sample)
prediction = model.predict(X_sample_scaled)

# === Show result ===
print("ðŸ§  Predicted Label:", prediction[0])
